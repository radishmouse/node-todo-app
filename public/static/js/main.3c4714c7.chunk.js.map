{"version":3,"sources":["List.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","items","map","item","console","log","key","id","className","onClick","handleClick","name","TodoForm","onSubmit","value","term","onChange","placeholder","type","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_deleteTodo","idToDelete","assertThisInitialized","fetch","concat","method","then","result","setState","state","filter","_onChange","userInput","_onSubmit","event","preventDefault","body","JSON","stringify","headers","Content-Type","r","json","todo","toConsumableArray","_this2","todoArray","table","_this3","src_TodoForm","target","src_List","Component","App","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c4714c7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst List = props => {\n  return (\n    <ul>\n      {props.items.map(item => {\n        console.log(item);\n        return (\n          <li \n            key={item.id} \n            className=\"single-todo\"\n            onClick={() => props.handleClick(item.id)}\n          >\n            {item.name}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\nfunction TodoForm(props) {\n    return (\n        <form onSubmit={props.onSubmit}>\n          <input\n            value={props.term}\n            onChange={props.onChange}\n            placeholder=\"Enter Todo\"\n          />\n          <button type=\"submit\">add</button>\n        </form>\n    );\n}\n\nexport default TodoForm;","import React, { Component } from \"react\";\nimport List from \"./List\";\nimport TodoForm from \"./TodoForm\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\",\n      items: []\n    };\n    // ewwwww.\n    // this._deleteTodo = this._deleteTodo.bind(this);\n  }\n\n  componentDidMount() {\n    // Make the Ajax call!\n    // Do eeeeet!\n    console.log('about to retrieve todos');\n    fetch('/todos')\n      .then(r => r.json())\n      .then(todoArray => {\n        console.table(todoArray);\n        // Version #1: just keep the names\n        // this.setState({\n        //   items: todoArray.map(todo => todo.name)\n        // });\n\n        // Version #2: save the entire array of objects\n        this.setState({\n          items: todoArray\n        });\n\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"title\">Todo App</h1>\n        <TodoForm \n          onSubmit={this._onSubmit}\n          term={this.state.term}\n          onChange={(event) => this._onChange(event.target.value)}\n        />\n        <div>\n          <List \n            items={this.state.items}\n            handleClick={this._deleteTodo}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  _deleteTodo = (idToDelete) => {\n    console.log(this);\n\n    fetch(`/todos/${idToDelete}`, {\n      method: 'DELETE'\n    })\n    .then(result => {\n      console.log(result);\n      this.setState({\n        items: this.state.items.filter(item => item.id !== idToDelete)\n      });\n    })\n\n\n    // let itemsToKeep = [];\n    // // keep all the items except the one at `indexToDelete`\n    // this.state.items.forEach((item, index) => {\n    //   if (index === indexToDelete) {\n    //     console.log(`${index}: delete it!`);\n    //   } else {\n    //     console.log(`${index}: keep it!`);\n    //     itemsToKeep.push(item);\n    //   }\n    // });\n    // // this.state.items = itemsToKeep;\n    // this.setState({\n    //   items: itemsToKeep\n    // });\n  }\n\n  _onChange = userInput => {\n    // const userInput = event.target.value;\n    console.log(userInput);\n    this.setState({\n      term: userInput\n    }, () => {\n      console.log('wheee! state is now updated');\n    });\n  };\n\n  _onSubmit = event => {\n    //puts on the brakes\n    event.preventDefault();\n    // console.log(\"submitted!\");\n\n    fetch('/todos', {\n      method: 'POST',\n      body: JSON.stringify({\n        name: this.state.term\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(r => r.json())\n    .then(todo => {\n      console.log(todo);\n      console.log('^^ is your new todo. enjoy.')\n      this.setState({\n        term: \"\",\n        items: [...this.state.items, todo]\n      });\n    })\n\n  };\n}\n\n\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Big\n// Damn\n// Object\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}